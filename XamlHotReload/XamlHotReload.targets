<Project>

    <PropertyGroup>
        <ReloadInjectorWorkingDir Condition=" $(ReloadInjectorWorkingDir) == '' ">$(MSBuildThisFileDirectory)</ReloadInjectorWorkingDir>
        <InjectorPublishPath>$(MSBuildThisFileDirectory)publish\ReloadInjectorTask.dll</InjectorPublishPath>
        <ReloadInjectorExecUsingCsx>true</ReloadInjectorExecUsingCsx>
        <!-- <ForceReloadInjectorExecUsingCsx Condition="$(ForceReloadInjectorExecUsingCsx) == ''">true</ForceReloadInjectorExecUsingCsx> -->
        <ReloadInjectorExecUsingCsx Condition="Exists('$(InjectorPublishPath)')">false</ReloadInjectorExecUsingCsx>
    </PropertyGroup>

    <Target Name="ReloadInjectorTask" AfterTargets="AfterCompile" Condition="Exists(@(IntermediateAssembly)) And ($(DesignTimeBuild) != true Or $(BuildingForLiveUnitTesting) == true) And $(DisableReloadInjector) != true">
        <ConvertToAbsolutePath Paths="@(IntermediateAssembly)">
            <Output TaskParameter="AbsolutePaths" PropertyName="MainAssembly" />
        </ConvertToAbsolutePath>
        <!-- <Message Importance="high" Text="ReferencePath: @(ReferencePath -> '%(OutputPath)%(Filename)%(Extension)')" /> -->
        <Exec Command="dotnet tool restore" WorkingDirectory="$(ReloadInjectorWorkingDir)" />
        <Exec Condition=" $(ReloadInjectorExecUsingCsx) == true or $(ForceReloadInjectorExecUsingCsx) != ''" Command="dotnet dotnet-script ReloadInjectorTask.csx '$(MainAssembly)' '@(ReferencePath)'" WorkingDirectory="$(ReloadInjectorWorkingDir)" ConsoleToMsBuild="true" />
        <Exec Condition=" $(ReloadInjectorExecUsingCsx) != true and $(ForceReloadInjectorExecUsingCsx) == ''" Command="dotnet dotnet-script exec '$(InjectorPublishPath)' -- '$(MainAssembly)' '@(ReferencePath)'" WorkingDirectory="$(ReloadInjectorWorkingDir)" ConsoleToMsBuild="true" />
    </Target>

</Project>